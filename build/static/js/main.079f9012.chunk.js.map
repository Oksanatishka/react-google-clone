{"version":3,"sources":["StateProvider.js","reducer.js","Search.js","Home.js","useGoogleSearch.js","keys.js","SearchPage.js","App.js","serviceWorker.js","index.js"],"names":["StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","actionTypes","state","action","console","log","type","term","Search","hideButtons","dispatch","useState","input","setInput","history","useHistory","search","e","preventDefault","push","className","onChange","target","Button","onClick","variant","Home","to","Avatar","src","alt","useGoogleSearch","data","setData","useEffect","a","fetch","then","response","json","result","fetchData","SearchPage","searchInformation","formattedTotalResults","formattedSearchTime","items","map","item","href","link","pagemap","cse_image","length","displayLink","title","snippet","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.079f9012.chunk.js","sourcesContent":["// importing the context api stuff\nimport React, { createContext, useContext, useReducer } from 'react';\n\n// preparing the data layer\nexport const StateContext = createContext();\n\n// higher order component\n// we're going to be using this to essentially wrap our app\n// so the main purpose of this block here is\n// it allows us to have something called a state provider and\n// we basically just wrap the app inside of the state provider and it provides that sort of data layer functionality\nexport const StateProvider = ({ reducer, initialState, children }) => (\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\n        {children}\n    </StateContext.Provider>\n);\n\n// whenever we want to pull information from the data layer we use this 'useStateValue' hook\nexport const useStateValue = () => useContext(StateContext);\n","export const initialState = {\n    term: null,\n};\n\nexport const actionTypes = {\n    SET_SEARCH_TERM: 'SET_SEARCH_TERM',\n};\n\nconst reducer = (state, action) => {\n    console.log(action);\n    switch (action.type) {\n        case actionTypes.SET_SEARCH_TERM:\n            return {\n                ...state,\n                term: action.term,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import React, { useState } from 'react';\nimport './Search.css';\nimport SearchIcon from '@material-ui/icons/Search';\nimport MicIcon from '@material-ui/icons/Mic';\nimport { Button } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport { useStateValue } from './StateProvider';\nimport { actionTypes } from './reducer';\n\nconst Search = ({ hideButtons = false }) => {\n    const [{}, dispatch] = useStateValue();\n    const [input, setInput] = useState('');\n    const history = useHistory();\n    const search = (e) => {\n        e.preventDefault();\n        console.log('You hit the search button', input);\n        dispatch({\n            type: actionTypes.SET_SEARCH_TERM,\n            term: input,\n        });\n        history.push('/search');\n    };\n    return (\n        <form className=\"search\">\n            <div className=\"search__input\">\n                <SearchIcon className=\"search__inputIcon\" />\n                <input value={input} onChange={(e) => setInput(e.target.value)} />\n                <MicIcon />\n            </div>\n\n            {!hideButtons ? (\n                <div className=\"search__buttons\">\n                    <Button type=\"submit\" onClick={search} variant=\"outlined\">\n                        Google Search\n                    </Button>\n                    <Button variant=\"outlined\">I'm Feeling Lucky</Button>\n                </div>\n            ) : (\n                <div className=\"search__buttons\">\n                    <Button\n                        className=\"search__buttonsHidden\"\n                        type=\"submit\"\n                        onClick={search}\n                        variant=\"outlined\"\n                    >\n                        Google Search\n                    </Button>\n                    <Button className=\"search__buttonsHidden\" variant=\"outlined\">\n                        I'm Feeling Lucky\n                    </Button>\n                </div>\n            )}\n        </form>\n    );\n};\n\nexport default Search;\n","import React from 'react';\nimport './Home.css';\nimport { Link } from 'react-router-dom';\nimport AppsIcon from '@material-ui/icons/Apps';\nimport { Avatar } from '@material-ui/core';\nimport Search from './Search';\n\nconst Home = () => {\n    return (\n        <div className=\"home\">\n            <div className=\"home__header\">\n                <div className=\"home__headerLeft\">\n                    <Link to=\"/about\">About</Link>\n                    <Link to=\"/store\">Store</Link>\n                </div>\n                <div className=\"home__headerRight\">\n                    <Link to=\"/gmail\">Gmail</Link>\n                    <Link to=\"/images\">Images</Link>\n                    <AppsIcon />\n                    <Avatar />\n                </div>\n            </div>\n            <div className=\"home__body\">\n                <img\n                    src=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\"\n                    alt=\"\"\n                />\n                <div className=\"home_inputContainer\">\n                    {/* <Search hideButtons /> */}\n                    <Search />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Home;\n","import { useState, useEffect } from 'react';\nimport API_KEY from './keys';\n\nconst CONTEXT_KEY = 'f3b392498b77de851';\n\nconst useGoogleSearch = (term) => {\n    const [data, setData] = useState(null);\n    useEffect(() => {\n        const fetchData = async () => {\n            fetch(\n                `https://www.googleapis.com/customsearch/v1?key=${API_KEY}&cx=${CONTEXT_KEY}&q=${term}`\n            )\n                .then((response) => response.json())\n                .then((result) => {\n                    setData(result);\n                });\n        };\n        fetchData();\n    }, [term]);\n    return { data };\n};\n\nexport default useGoogleSearch;\n","// export const API_KEY = 'YOUR_API_KEY';\nexport const API_KEY = 'AIzaSyDZjRMP59NpGHN1RRP2QoIZjufOrNDSoTY';\n\nexport default API_KEY;\n","import React from 'react';\nimport './SearchPage.css';\nimport { useStateValue } from './StateProvider';\nimport useGoogleSearch from './useGoogleSearch';\nimport Response from './response.js';\nimport { Link } from 'react-router-dom';\nimport Search from './Search';\n\nimport SearchIcon from '@material-ui/icons/Search';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport ImageIcon from '@material-ui/icons/Image';\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\nimport RoomIcon from '@material-ui/icons/Room';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\n\nconst SearchPage = () => {\n    const [{ term }, dispatch] = useStateValue();\n    // LIVE API CALL\n    const { data } = useGoogleSearch(term);\n\n    // MOCK API CALL\n    // const data = Response; // to get data from our local response\n\n    // https://developers.google.com/custom-search/v1/using_rest -> click on 'identify your application' -> 'Get a Key' -> create /src/keys.js file\n    // https://cse.google.com/cse/create/new -> Sites to search: 'www.google.com' -> Create -> Edit search engine: Google, Setup -> Search the entire web: On -> grab 'Search Engine ID' -> create /src/useGoogleSearch.js -> rsc ->\n\n    console.log(data);\n    return (\n        <div className=\"searchPage\">\n            <div className=\"searchPage__header\">\n                {/* <h1>{term}</h1> */}\n                <Link to=\"/\">\n                    <img\n                        className=\"searchPage__logo\"\n                        src=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\"\n                        alt=\"\"\n                    />\n                </Link>\n\n                <div className=\"searchPage__headerBody\">\n                    <Search hideButtons />\n                    <div className=\"searchPage__options\">\n                        <div className=\"searchPage__optionsLeft\">\n                            <div className=\"searchPage__option\">\n                                <SearchIcon />\n                                <Link to=\"/all\">All</Link>\n                            </div>\n\n                            <div className=\"searchPage__option\">\n                                <DescriptionIcon />\n                                <Link to=\"/news\">News</Link>\n                            </div>\n\n                            <div className=\"searchPage__option\">\n                                <ImageIcon />\n                                <Link to=\"/images\">Images</Link>\n                            </div>\n\n                            <div className=\"searchPage__option\">\n                                <LocalOfferIcon />\n                                <Link to=\"/shopping\">Shopping</Link>\n                            </div>\n\n                            <div className=\"searchPage__option\">\n                                <RoomIcon />\n                                <Link to=\"/maps\">Maps</Link>\n                            </div>\n\n                            <div className=\"searchPage__option\">\n                                <MoreVertIcon />\n                                <Link to=\"/more\">More</Link>\n                            </div>\n                        </div>\n                        <div className=\"searchPage__optionsRight\">\n                            <div className=\"searchPage__option\">\n                                <Link to=\"/settings\">Settings</Link>\n                            </div>\n                            <div className=\"searchPage__option\">\n                                <Link to=\"/tools\">Tools</Link>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            {term && (\n                <div className=\"searchPage__results\">\n                    <p className=\"searchPage__resultCount\">\n                        About {data?.searchInformation.formattedTotalResults} results (\n                        {data?.searchInformation.formattedSearchTime} seconds) for {term}\n                    </p>\n                    {data?.items.map((item) => (\n                        <div className=\"searchPage__result\">\n                            <a href={item.link}>\n                                {item.pagemap?.cse_image?.length > 0 &&\n                                    item.pagemap?.cse_image[0]?.src && (\n                                        <img\n                                            className=\"searchPage__resultImage\"\n                                            src={item.pagemap?.cse_image[0]?.src}\n                                            alt=\"\"\n                                        />\n                                    )}\n                            </a>\n                            <a className=\"searchPage__resultTitle\" href={item.link}>\n                                {item.displayLink}\n                                <h2>{item.title}</h2>\n                            </a>\n                            <p className=\"searchPage__resultSnippet\">{item.snippet}</p>\n                        </div>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default SearchPage;\n","import React from 'react';\n\nimport './App.css';\nimport Home from './Home';\n// import Search from './Search';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport SearchPage from './SearchPage';\n\nfunction App() {\n    return (\n        <div className=\"app\">\n            <Router>\n                <Switch>\n                    <Route path=\"/search\">\n                        <SearchPage />\n                    </Route>\n                    <Route path=\"/\">\n                        <Home />\n                    </Route>\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider } from './StateProvider';\nimport reducer, { initialState } from './reducer';\n\nReactDOM.render(\n    <React.StrictMode>\n        <StateProvider initialState={initialState} reducer={reducer}>\n            <App />\n        </StateProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}