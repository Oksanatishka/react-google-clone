- Context API (Redux)
- Material UI
- React Router - Search page to results instantly without refresh
- Google Custom Search API
- Make our own custom hook with React
- Firebase to setup the app to connect to Google
- Use Firebase hosting to deploy the app

2 Pages:
    - Home (the one with the search on)
    - SearchPage (the results page)

Create /src/pages folder
    Home.js
    Home.css
Create /src/components folder

Material UI:
    > npm install @material-ui/core    
    > npm install @material-ui/icons 

React Router:
    > npm i react-router-dom
    import { BrowseRouter as Router, Switch, Route } from 'react-router-dom';

state = how you write variables in react.

To make search input work based on 'enter' key not only 'Google Search' button on Home page:
    - change <div className="search"> to <form className="search">
    - add type="submit" to <Button onClick={search} variant="outlined">Google Search</Button>

'useHistory' hook

Context API:
    In index.js:
        - wrap <App /> component in state provider (it's going to provide 'data layer' around our app):
            <StateProvider initialState={initialState} reducer={reducer}>
                <App />
            </StateProvider>
        - add imports:
            import { StateProvider } from './StateProvider';
            import reducer, { initialState } from './reducer';
    Create StateProvider.js file:
        import React, { createContext, useContext, useReducer } from 'react';
        export const StateContext = createContext();
        export const StateProvider = ({ reducer, initialState, children }) => (
            <StateContext.Provider value={useReducer(reducer, initialState)}>
                {children}
            </StateContext.Provider>
        );
        export const useStateValue = () => useContext(StateContext);
    Create reducer.js file:
        export const initialState = {
            term: null,
        };
        export const actionTypes = {
            SET_SEARCH_TERM: 'SET_SEARCH_TERM',
        };
        const reducer = (state, action) => {
            console.log(action);
            switch (action.type) {
                case actionTypes.SET_SEARCH_TERM:
                    return {
                        ...state,
                        term: action.term,
                    };
                default:
                    return state;
            }
        };
        export default reducer;

    Use 'useStateValue' hook (created in StateProvider.js) in Search.js:
        import { useStateValue } from '../StateProvider';
        import { actionTypes } from '../reducer';
        const [{}, dispatch] = useStateValue();
        - Add dispatch here:
            const search = (e) => {
                e.preventDefault();
                console.log('You hit the search button', input);
                dispatch({
                    type: actionTypes.SET_SEARCH_TERM,
                    term: input,
                });
                history.push('/search');
            };
    Use 'useStateValue' hook (created in StateProvider.js) in SearchPage.js:    
        import { useStateValue } from '../StateProvider';
        const [{ term }, dispatch] = useStateValue();
        <h1>{term}</h1>
    Create keys.js  
        export const API_KEY = 'YOUR_API_KEY';
        export default API_KEY;


Google Search API
    https://developers.google.com/custom-search/v1/using_rest 
        -> click on 'identify your application' -> 'Get a Key' -> create /src/keys.js file
            export const API_KEY = 'YOUR_API_KEY';
            export default API_KEY;
    https://cse.google.com/cse/create/new  - In order to use the Google Search API.
        -> Sites to search: 'www.google.com' -> Create 
        -> Edit search engine: Google, Setup 
        -> Search the entire web: On  -> grab 'Search Engine ID' 
        -> create /src/useGoogleSearch.js 
            -> rsc 
            -> change code to:
                import { useState, useEffect } from 'react';
                import API_KEY from './keys';
                const CONTEXT_KEY = 'CONTEXT_KEY';          // replace with 'Search Engine ID'
                const useGoogleSearch = (term) => {         // custom hook
                    const [data, setData] = useState(null);
                    useEffect(() => {                       //  whenever we use this hook it's gonna fire off a useEffect and this useEffect is dependent on term
                        const fetchData = async() => {
                            fetch(                          // this is the endpoint that connects to google's custom search api
                                `https://www.googleapis.com/customsearch/v1?key=${API_KEY}&cx=${CONTEXT_KEY}&q=${term}`
                            )
                            .then((response) => res.json())
                            .then((result) => {
                                setData(result);
                            });
                        }
                        fetchData();
                    }, [term]);
                    return { data };
                };
                export default useGoogleSearch;
    In SearchPage.js add:
        import useGoogleSearch from '../useGoogleSearch';
        const { data } = useGoogleSearch(term);
        console.log(data);
    Check:
        Inspector -> Network -> v1?key=AIzaSyDZjRMP59NpGHN1RRP2QoIZjufOrNDSoTY -> Response tab -> copy to /src/response.js
    